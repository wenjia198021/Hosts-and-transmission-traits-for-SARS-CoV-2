K-mer natural vector is employed to explore the hosts and transmission traits of SARS-CoV-2, which was well kept the ability to deal with recombination, shuffling, and rearrangement often existing in virus genome evolution, and overcame deficiencies of previous k-mer models.

The k-mer natural vector characterizes the compositions and distribution features of k-mers appearing in a virus genome, and there is a one-to-one relationship between a virus sequence and its k-mer natural vector. The significant novelty for this new method is that the virus sequence can be recovered by its corresponding k-mer natural vector through a rigorous mathematical proof.

Based on k-mer representaton for nucleotide sequence, k-mer natural vector is defined as follows:
let s='N_1 N_2⋯N_L' be a virus sequence with length L, where N_l∈{A,C,G,T}, l=1,2,⋯,L, and s[j][i] be the location of the i-th occurrence of a k-mer s[j] in s, j=1,2,⋯,4^k. For each given k, the distributions of a k-mer s[j] can be described by three quantities:
  n_s[j] : Number of s[j]  occurrences in s;
  μ_s[j] : Mean distance of s[j] from the first position of s;
  D_m^s[j] : Center central moment of s[j], that is, 
         D_m^(s[j])=∑_(i=1)^(n_(s[j]))▒〖(s[j][i]-μ_s[j] )〗^m/(n_(s[j])^(m-1) 〖(L-k+1)〗^(m-1) ),m=1,2,⋯,n_s[j] .
Thus, the k-mer natural vector for sequence s is defined by (n_s[j] ,μ_s[j] , D_m^s[j] ), j=1,2,⋯,4^k. 
(Please see manuscript and supplemantary information for more detail on k-mer natural vector) 

Code of k-mer natural vector for nucleotide sequences (such as genome sequence from SARS-CoV-2):
clc
clear
name='test_data';
filename=strcat(name,'.fasta');
txtc = textread(filename,'%s','delimiter','\n','whitespace','','bufsize', 409500);
mt = find(cellfun('isempty',txtc));
txtc(mt) = [];
lengthn = size(txtc, 1);
name1='';
taxanum = 0;
for j1 = 1 : lengthn
    if txtc{j1}(1) == '>'
        taxanum = taxanum + 1;
        name1{taxanum}=txtc{j1}(2:end);
    end
end
seq{taxanum} ='';
signk = 0;
signtaxa = 1;
for j1 = 2 : lengthn     
    if txtc{j1}(1) ~= '>'
        lengthj = length(txtc{j1});
        seq{signtaxa}(signk+1 : signk+lengthj) = txtc{j1};
        signk = signk + lengthj;
    else
        signtaxa = signtaxa + 1;
        signk = 0;
    end
end

kmer=8;%%Herein, k=8 for genome sequences from SARS-CoV-2
nucleotide='ACGT';
base=nucleotide';
A='';
for k=1:(kmer-1)
    l=1;
    for i=1:4^k
        for j=1:4
            A(l,:)=strcat(base(i,:),nucleotide(j));
            l=l+1;
        end
    end
    base=A;
    A='';
end
B=base;
n=4^kmer;

S=[];
for i=1:length(seqs)
    coro_seq='';
    coro_seq=seqs(i).Sequence;
    len=length(coro_seq)-kmer+1;
    F=[];
    for j=1:n
        C='';
        C=B(j,:);
        D=[];
        D=strfind(coro_seq,C);
               
        E=[];
        if length(D)~=0
            E=[length(D) mean(D) sum((D-mean(D)).^2)/(length(D)*len)];%% Order two central moment is enough to represent a virus sequence so we choose order 2 central moment to depict a virus sequence 
        else
            E=[0 0 0];
        end
        
        F=[F E];        
    end
    S(i,:)=F;    
end

measure='cosine';%% we choose cosine distance as measure to quantify the differences between virus sequences
M=[];
M=squareform(pdist(S,measure));
    
outputfilename=strcat(name,'_',measure,'_k_',num2str(kmer),'.meg');
num_of_seq=taxanum;
outfile=fopen(outputfilename, 'w');
fprintf(outfile, '#mega\n');
fprintf(outfile, '!Title: TEST;\n');
fprintf(outfile, '!Format DataType=Distance DataFormat=LowerLeft NTaxa=%d;\n', num_of_seq);
fprintf(outfile, '\n');
for k = 1 : num_of_seq
    fprintf(outfile, '[%d] #%s\n', k, name1{k});
end
fprintf(outfile, '\n');
for j = 2 : num_of_seq
   fprintf(outfile, '[%d]   ', j);
   for k = 1 : (j-1)
       fprintf(outfile, ' %8f', M(j, k));
   end
   fprintf(outfile, '\n');
end
fprintf(outfile, '\n');
fclose(outfile);

Once we get the corresponding .meg file, we could get the neighbour-joining (NJ) tree by the software of Mega 7.0 (or Mega X).
